package controllers;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import model.BookController;
import model.OperationResponse;
import model.Publisher;
import model.PublisherController;

public class ManagerPageViewController implements Initializable {
	private String parent = "/fxml/Home.fxml";
	@FXML
	private Button reportsBtn;
	@FXML
	private Button confirmOrderBtn;
	@FXML
	private Button promoteBtn;
	@FXML
	private Button placeOrderBtn;
	@FXML
	private Button addBookBtn;
	@FXML
	private Button editBookBtn;
	@FXML
	private Button backHomeBtn;
	@FXML
	private AnchorPane editInputLayout;
	@FXML
	private TextField isbnTxt;
	@FXML
	private Button goBtn;

//	@FXML
//	private AnchorPane placeOrderLayout;

	@FXML
	private AnchorPane addPublisherLayout;

	@FXML
	private TextField publisherNameTxt;

	@FXML
	private TextField addressTxt;

	@FXML
	private TextField phoneTxt;

	@FXML
	private Label errorLbl;

	private BookController bc;
	private PublisherController pc;

	@FXML
	public void showReportsListener(ActionEvent event) {
		UtilControl.changeScene(event, getClass().getResource("/fxml/Reports.fxml"));
	}

	@FXML
	public void confirmOrderListener(ActionEvent event) {
		UtilControl.changeScene(event, getClass().getResource("/fxml/Orders.fxml"));
	}

	@FXML
	public void promoteListener(ActionEvent event) {
		UtilControl.changeScene(event, getClass().getResource("/fxml/promote.fxml"));
	}

	@FXML
	public void placeOrderListenr(ActionEvent event) {
		UtilControl.changeScene(event, getClass().getResource("/fxml/place_orders.fxml"));

//		clearControls();
//		placeOrderLayout.setVisible(true);
	}

	@FXML
	public void addBookListener(ActionEvent event) {
		UtilControl.changeScene(event, getClass().getResource("/fxml/AddBook.fxml"));
	}

	@FXML
	public void editBookListener(ActionEvent event) {
		clearControls();
		editInputLayout.setVisible(true);
	}

    @FXML
    void showAddPublisherLayout(ActionEvent event) {
    	clearControls();
		addPublisherLayout.setVisible(true);
		
    }

	@FXML
	public void backHomeLsitener(ActionEvent event) {
		// TODO Autogenerated
	}

	@FXML
	public void goEditBookListener(ActionEvent event) {
		String isbn = isbnTxt.getText().trim();
		if (!bc.isConnected()) {
			// TODO check server connected
			System.out.println("server faild");
			return;
		}
		if (isbn.isEmpty()) {
			// TODO : label for error
			System.out.println("Empty field");
			return;
		}

		if (isbn.length() != bc.getISBNMaxLength()) {
			System.out.println("Invalid ISBN");
			return;
		}
		OperationResponse or = bc.searchForBook(isbn);
		if (!or.isExecutedSuccessfuly()) {
			System.out.println("Invalid ISBN");
			return;
		}
		changeScene(event, "/fxml/ModifyBook.fxml");
	}

	@FXML
	void addPublisherListener(ActionEvent event) {
		errorLbl.setText("");
		if(!pc.isConnected()) {
			errorLbl.setText("Server is disconnected");
		}
		
		Publisher publisher = getPublisher();
		if(publisher != null) {
			OperationResponse or = pc.addPublisher(publisher);
			if(!or.isExecutedSuccessfuly()) {
				errorLbl.setText(or.getErrorMessage());
			}else {
				clearPublisherControls();
			}
		}
		
		
	}
	
	private Publisher getPublisher() {
		Publisher publisher;
		String name = publisherNameTxt.getText().trim();
		String address = addressTxt.getText().trim();
		String phone = phoneTxt.getText().trim();
		
		if(name.isEmpty() || address.isEmpty() || phone.isEmpty()) {
			errorLbl.setText("Some fields are empty");
			return null;
		}
		
		publisher = new Publisher(name, address, phone);
		return publisher;
	}

	@FXML
	void backListener(ActionEvent event) {
    	UtilControl.changeScene(event, getClass().getResource(parent));
	}

	private void changeScene(Event event, String path) {
		try {
			Node node = (Node) event.getSource();
			Stage stage = (Stage) node.getScene().getWindow();
			FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(path));
			Parent root = fxmlLoader.load();
			Scene scene = new Scene(root);
			
			ModifyBookViewController controller = fxmlLoader.getController();
			controller.setISBN(isbnTxt.getText());
			controller.setParent("/fxml/ManagerPage.fxml");
			stage.close();
			stage.setScene(scene);
			stage.setResizable(false);
			stage.show();
		} catch (IOException ex) {
			System.err.println(ex.getMessage());
		}
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		bc = new BookController();
		pc = new PublisherController();

		clearControls();

		// Edit layout controls init
		UtilControl.addValidation(isbnTxt, UtilControl.DIGRGX, UtilControl.NDIGRGX);
		UtilControl.addTextLimiter(isbnTxt, bc.getISBNMaxLength());

		// Add publisher controls init
		UtilControl.addValidation(publisherNameTxt, UtilControl.WORDRGX, UtilControl.NWORDRGX);
		UtilControl.addTextLimiter(publisherNameTxt, pc.getNameMaxLenth());
		UtilControl.addValidation(addressTxt, UtilControl.WORDRGX, UtilControl.NWORDRGX);
		UtilControl.addTextLimiter(addressTxt, pc.getAddressMaxLenth());
		UtilControl.addValidation(phoneTxt, UtilControl.DIGRGX, UtilControl.NDIGRGX);
		UtilControl.addTextLimiter(phoneTxt, pc.getPhoneMaxLenth());
		
		addPublisherLayout.setVisible(true);

	}

	private void clearControls() {
		editInputLayout.setVisible(false);
//		placeOrderLayout.setVisible(false);
		addPublisherLayout.setVisible(false);
		isbnTxt.setText("");
		clearPublisherControls();
	}
	
	private void clearPublisherControls() {
		errorLbl.setText("");
		publisherNameTxt.setText("");
		addressTxt.setText("");
		phoneTxt.setText("");
	}
}
